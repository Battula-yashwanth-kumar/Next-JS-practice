React Server Components(RSC)

--> React Server components is an new architecture introduced by the React team in version 18 which was embraced by Next.js
--> The architecture introduces anew way of creating React components, splitting them into two types:
    -> Server components
    -> Client components

---> Server Components
 
 - In Next.js, all components are server components by default
 - They have the ability to run tasks like reading files or fteching data from a database
 - However, they don't have the ability to use hooks or handle user interactions

 ---> Client Components

 - To create a cleint components, it's necessary to add "use client" at the top of the component files
 - Client component can't perform tasks like reading files, but they have the ability to use hooks and manage interactions


 -------------> Routing <----------------

 --> Next.js has a file-system based routing mechanism
 --> URL paths that users can access in the browser are defined by files and folder in your codebase


 ------------> Routing Metadata <----------------

 Ensuring proper search engine optimization (SEO) is crucial for increasing visibility and attracting users
 Next.js introduced the metadata API which allows you to define metadata for each page
 Metadata ensure accurate and relevant information is displayed when yournpages are shared or indexed.

 Configuring Metadata

 Export a static metadata object
 Export a dynamic generateMetadata function

 Metadata rules

 Both layout.tsx and page.tsx files can export metadata. If defined in a layout, it applies to all pages in that layout, but if defined in a page, it applies only to that page
 Metadata is read in order, from the root level down to the final page level
 When there's metadata in multiple places for the same route , they get combined , but page metadata will replace layout metadata if they have the same properties

 --------------------> Templates <-------------------

 Templates are similar to layouts in that they wrap each child layout or page
 But, with templates, when a user navigates between routes that share a templates, a new instance of the component ismounted, DOM elements are recreated , state is not preserved and the effects are re-synchronized.
 A template can be defined by exporting a default React Component from a template.js or template.tsx file
 Similar to layouts , templates also should accept a children prop which will render the nested segments in the route

 --------------------> Loading.tsx Benefits <----------------------

 you can display the loading state as soon as a user navigates to a new route
 The immediate feedback reassures users that their action has been acknowledged, reduced preceived loading times, and makes the application feel more responsive.
 Next.js allows the creation of shared layouts that remain interactive while newn route segments are loading
 Users can continue interacting with certain parts of the application, shuch as a navigation menu or sidebar, even if the main content is still being fetched.

 ------------------> Error.tsx <---------------------------------

 Automatically wrap a route segment and its nested children in a React Error Boundary.
 Create error UI tailored to specific segments using the file system hierarchy to adjust granularity.
 Isolate Error to afftect segments while keeping the rest of the application functional.
 Add functionality to attempt to recover from an error without a ful page reload.


 -----------------> DashBoard (Parallel Routing)<--------------------

 Parallel routes in Next.js are defined using a feature known as slots
 Slots help strucutre our content in a modular fashion
 To define a slot, we use the `@folder` naming convention
 Each slot is then passed as a prop to its corresponding `layout.tsx` file.

----------> Parallel Routes Benefits
A clear benefit of parallel routes is their ability to split a single layout into various slots, making the code more manageable
Independent route handling
Sub-navigation

-----------> Independent Route Handdling
Each slot of your layout, such as user analytics or revenue metrics, can have its own laoding and Error states
This granular control is particularly beneficial in scenarios where different sections of the page load at varying speeds or encounter unique errors

------------> Sub Navigation in routes
Each slot of your dashboard can essentially function as a mini-application, complete with its own navigation and state management
This is especially useful in a complex application such as our dashboard where different section serve distinct purpose.


--------------------------------> Intercepting Routes <-----------------------------------

---> Intercepting routes allow you to intercept or stop the default routing behaviour to present an alternate view or component when navigating through the UI, while still preserving the intednded route for scenarios like page reloads
---> This can be useful if you want to show a route while keeping the context of the current page
(.) to match segments on to same level
(..) to match segments on level above
(..)(..) to match segemnts two level above
(...) to match segments from the root app directory


----------------->Headers in Route Handlers (Profile/api)<----------------------

---> HTTp headers respresent the metadata associated with an API request and response.
---> Request Headers

-- These are sent by the client , such as a web browser, to the server. They contain essesntial information about the request, which helps the server understand and process oit correctly.
-- 'User-Agent' whcih identifies the browser and operating system to the server.
-- 'Accept' which indicates the conent types like text, video or image formats that the client can process.
-- 'Authorization' header used by the client to aunthentication itself to the server. 

---> ResponseHeaders

-- THese are sent back from the server to the client. Tzhey provide information about the server and the data being sent in the response.
-- "Content-Type' header which indicates the media type of the response. It tells the client what the data type of the returned conent is, such as text/html for HTML documents, application/json for JSON data, etc.


---------------------> Caching in Route Handlers (time) <--------------------------

-- Route Handlers are cached by default when using the GET method with the Response object in Next.js
--> How to Opt out of caching ?

- dynamic mode in Segment Config option
- Using the Request object with the GET method
- employing dynamic function like hesders() and cookies()
- using any HTTP method other than GET

--------------> Rendering <-----------------

- Rendering is the process that transforms the code you write into user interfaces
- In Next.js, choosing the right time and place to do this rendering is vital for building a performant application
- css,SSr and RSCs

      ------------> Client - side Rendering <----------------
      This method of rendering , where the component code is tranformed into a user interface directly within the browser (the client), i sknow as client-side rendering (CSR).
      CSR quickly became the standard for SPAs, with widespread adoption
      It wasn't long before developers began noticing some inherent drawbacks to this approch

      ---> Drawbacks of CSR
      --SEO
      Generating HTML that mainly contains a single div tag is not optimal for SEO, as it provides little content for search engines to index.
      --Performance
      Having the browser (the client) handle all the work, such as fetching data, computing the UI, and making the HTML interactive, can slow things down. Users might see a black screen or a loading spinner while the page loads

      Each new feature added to the application increases the size of the javascript bundle, prolonging the wait tie for users to see the UI

      ---------------> Server Side Solutions <-------------------
      --It significantly improves SEO because search engines can easily index the server- rendered content.
      --Users can immediately see the page HTML content, instead of a blank screen or loading spinner
      --------------- Hydration --------------
      During hydration, React takes control in the browser, reconstrucuting the component tree in memory based on the static HTML that was served.
      It carefully plans the placement of interactive elements within this tree. Then, React proceeds to bind the necessary Javascript logic to these elements
      This invloves initializing the application state, attaching event handlers for actions such as clicks and mouseivers and setting up any other dynamic functionalities required for a fully interactive user expereicence.

      -- server-side Solutions
      Static Site Generation (SSG)
      Server-side Rendering (SSR)

      --SSG occurs at build time, when the application is deployed on the server. THis results in pages that are already rendered and ready to serve.It is ideal for content that doesn't change often, like blog posts.
      --SSR, on the other hand, renders pages on-demand in response to user requests. It is suitable for personalized content like socail media feeds , where the HTML depens on teh loggged-in user.
      --Server-side Rendering (SSR) was a significant improvement over Client-Side Rendering (CSR), providing faster initial page loads and better SEO.

      --- Drawbacks of SSR

      --> You have to fetch everything before you can show anything
         -Components canot start rendering and the pause or wait while data is still being loaded
         -If a component needs to fetch data from a database or another source (like an API), this fetching must be completed before the server can begin rendering the page
         -This can delpay the server's response time to the browser, as the server must finish collecting all necessary data before any part of the page can be sent to the client.

      --> You have to load everything before you can hydrate anything
         - For successful hyderation, where React adds interactivity to the server-renderedHTML,the component tree is the browser must exactly match the server-generated component tree
         - This means that all the Javascriot for the components must be loaded on the client before you can start hydratubg any of them.

      --> You have to hyderate everything before you can interative with anything
        - React hydrates the component tree in a single pass, meaning once it starts hyderating, it won't stop until it's finished with the entire tree
        - As a consequences , all components must be hydrated before you can interact with any of them. 

        1) Having to load the data for the entire page
        2) load the javaScript for yhe entire page, and 
        3) Hyderate the entire page

        Create an "all or nothing" waterfall problem that spans from the server to the client, where each issue must be resolved before moving ot the next one.
        TZHis is inefficient if some parts of your app are slower than ohters, as is often the case in real-world apps  