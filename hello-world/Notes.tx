React Server Components(RSC)

--> React Server components is an new architecture introduced by the React team in version 18 which was embraced by Next.js
--> The architecture introduces anew way of creating React components, splitting them into two types:
    -> Server components
    -> Client components

---> Server Components
 
 - In Next.js, all components are server components by default
 - They have the ability to run tasks like reading files or fteching data from a database
 - However, they don't have the ability to use hooks or handle user interactions

 ---> Client Components

 - To create a cleint components, it's necessary to add "use client" at the top of the component files
 - Client component can't perform tasks like reading files, but they have the ability to use hooks and manage interactions


 -------------> Routing <----------------

 --> Next.js has a file-system based routing mechanism
 --> URL paths that users can access in the browser are defined by files and folder in your codebase


 ------------> Routing Metadata <----------------

 Ensuring proper search engine optimization (SEO) is crucial for increasing visibility and attracting users
 Next.js introduced the metadata API which allows you to define metadata for each page
 Metadata ensure accurate and relevant information is displayed when yournpages are shared or indexed.

 Configuring Metadata

 Export a static metadata object
 Export a dynamic generateMetadata function

 Metadata rules

 Both layout.tsx and page.tsx files can export metadata. If defined in a layout, it applies to all pages in that layout, but if defined in a page, it applies only to that page
 Metadata is read in order, from the root level down to the final page level
 When there's metadata in multiple places for the same route , they get combined , but page metadata will replace layout metadata if they have the same properties

 --------------------> Templates <-------------------

 Templates are similar to layouts in that they wrap each child layout or page
 But, with templates, when a user navigates between routes that share a templates, a new instance of the component ismounted, DOM elements are recreated , state is not preserved and the effects are re-synchronized.
 A template can be defined by exporting a default React Component from a template.js or template.tsx file
 Similar to layouts , templates also should accept a children prop which will render the nested segments in the route

 --------------------> Loading.tsx Benefits <----------------------

 you can display the loading state as soon as a user navigates to a new route
 The immediate feedback reassures users that their action has been acknowledged, reduced preceived loading times, and makes the application feel more responsive.
 Next.js allows the creation of shared layouts that remain interactive while newn route segments are loading
 Users can continue interacting with certain parts of the application, shuch as a navigation menu or sidebar, even if the main content is still being fetched.

 ------------------> Error.tsx <---------------------------------

 Automatically wrap a route segment and its nested children in a React Error Boundary.
 Create error UI tailored to specific segments using the file system hierarchy to adjust granularity.
 Isolate Error to afftect segments while keeping the rest of the application functional.
 Add functionality to attempt to recover from an error without a ful page reload.


 -----------------> DashBoard (Parallel Routing)<--------------------

 Parallel routes in Next.js are defined using a feature known as slots
 Slots help strucutre our content in a modular fashion
 To define a slot, we use the `@folder` naming convention
 Each slot is then passed as a prop to its corresponding `layout.tsx` file.

----------> Parallel Routes Benefits
A clear benefit of parallel routes is their ability to split a single layout into various slots, making the code more manageable
Independent route handling
Sub-navigation

-----------> Independent Route Handdling
Each slot of your layout, such as user analytics or revenue metrics, can have its own laoding and Error states
This granular control is particularly beneficial in scenarios where different sections of the page load at varying speeds or encounter unique errors

------------> Sub Navigation in routes
Each slot of your dashboard can essentially function as a mini-application, complete with its own navigation and state management
This is especially useful in a complex application such as our dashboard where different section serve distinct purpose.


--------------------------------> Intercepting Routes <-----------------------------------

---> Intercepting routes allow you to intercept or stop the default routing behaviour to present an alternate view or component when navigating through the UI, while still preserving the intednded route for scenarios like page reloads
---> This can be useful if you want to show a route while keeping the context of the current page
(.) to match segments on to same level
(..) to match segments on level above
(..)(..) to match segemnts two level above
(...) to match segments from the root app directory


----------------->Headers in Route Handlers (Profile/api)<----------------------

---> HTTp headers respresent the metadata associated with an API request and response.
---> Request Headers

-- These are sent by the client , such as a web browser, to the server. They contain essesntial information about the request, which helps the server understand and process oit correctly.
-- 'User-Agent' whcih identifies the browser and operating system to the server.
-- 'Accept' which indicates the conent types like text, video or image formats that the client can process.
-- 'Authorization' header used by the client to aunthentication itself to the server. 

---> ResponseHeaders

-- THese are sent back from the server to the client. Tzhey provide information about the server and the data being sent in the response.
-- "Content-Type' header which indicates the media type of the response. It tells the client what the data type of the returned conent is, such as text/html for HTML documents, application/json for JSON data, etc.


---------------------> Caching in Route Handlers (time) <--------------------------

-- Route Handlers are cached by default when using the GET method with the Response object in Next.js
--> How to Opt out of caching ?

- dynamic mode in Segment Config option
- Using the Request object with the GET method
- employing dynamic function like hesders() and cookies()
- using any HTTP method other than GET

--------------> Rendering <-----------------

- Rendering is the process that transforms the code you write into user interfaces
- In Next.js, choosing the right time and place to do this rendering is vital for building a performant application
- css,SSr and RSCs

      ------------> Client - side Rendering <----------------
      This method of rendering , where the component code is tranformed into a user interface directly within the browser (the client), i sknow as client-side rendering (CSR).
      CSR quickly became the standard for SPAs, with widespread adoption
      It wasn't long before developers began noticing some inherent drawbacks to this approch

      ---> Drawbacks of CSR
      --SEO
      Generating HTML that mainly contains a single div tag is not optimal for SEO, as it provides little content for search engines to index.
      --Performance
      Having the browser (the client) handle all the work, such as fetching data, computing the UI, and making the HTML interactive, can slow things down. Users might see a black screen or a loading spinner while the page loads

      Each new feature added to the application increases the size of the javascript bundle, prolonging the wait tie for users to see the UI

      ---------------> Server Side Solutions <-------------------
    
    
      --It significantly improves SEO because search engines can easily index the server- rendered content.
      --Users can immediately see the page HTML content, instead of a blank screen or loading spinner
      --------------- Hydration --------------
      During hydration, React takes control in the browser, reconstrucuting the component tree in memory based on the static HTML that was served.
      It carefully plans the placement of interactive elements within this tree. Then, React proceeds to bind the necessary Javascript logic to these elements
      This invloves initializing the application state, attaching event handlers for actions such as clicks and mouseivers and setting up any other dynamic functionalities required for a fully interactive user expereicence.

      -- server-side Solutions
      Static Site Generation (SSG)
      Server-side Rendering (SSR)

      --SSG occurs at build time, when the application is deployed on the server. THis results in pages that are already rendered and ready to serve.It is ideal for content that doesn't change often, like blog posts.
      --SSR, on the other hand, renders pages on-demand in response to user requests. It is suitable for personalized content like socail media feeds , where the HTML depens on teh loggged-in user.
      --Server-side Rendering (SSR) was a significant improvement over Client-Side Rendering (CSR), providing faster initial page loads and better SEO.

      --- Drawbacks of SSR

      --> You have to fetch everything before you can show anything
         -Components canot start rendering and the pause or wait while data is still being loaded
         -If a component needs to fetch data from a database or another source (like an API), this fetching must be completed before the server can begin rendering the page
         -This can delpay the server's response time to the browser, as the server must finish collecting all necessary data before any part of the page can be sent to the client.

      --> You have to load everything before you can hydrate anything
         - For successful hyderation, where React adds interactivity to the server-renderedHTML,the component tree is the browser must exactly match the server-generated component tree
         - This means that all the Javascriot for the components must be loaded on the client before you can start hydratubg any of them.

      --> You have to hyderate everything before you can interative with anything
        - React hydrates the component tree in a single pass, meaning once it starts hyderating, it won't stop until it's finished with the entire tree
        - As a consequences , all components must be hydrated before you can interact with any of them. 

        1) Having to load the data for the entire page
        2) load the javaScript for yhe entire page, and 
        3) Hyderate the entire page

        Create an "all or nothing" waterfall problem that spans from the server to the client, where each issue must be resolved before moving ot the next one.
        TZHis is inefficient if some parts of your app are slower than ohters, as is often the case in real-world apps  

        ------------------------> Drawbacks of SSR - All or Nothing Waterfall <-----------------------
        -- Data fetching must be completed before the server can begin rendering HTML.
        -- The javascript required for the components needs to be fully loaded on the client side before the hydration process can start.
        -- All components have to be hydrated before they become interactive
        - These issues contribute to an 'all or nothing' waterfall scenario, resulting in inefficiencies, especially if certin parts of your application are slower than others.
        
        ---> Suspense SSR Architecture
        -- HTML streaming on the server
        -- Selective hydration on the client

        ----> HTML streaming on the Server
        -- You don't have to fetch everything before you can show anything
        -- If a particular section delays the initial HTML, it can be seamlessly integrated into the stream later
        -- This is the essence of how Suspense facilitates server-side HTML streaming.
        --->        Other Challenge
        -- Until the javascript for the main section is loaded, client-side app hydration cannot start
        -- And if the JavaScript bundle for the main section is large, this could significantly delay the porcess.

        -----------> Soultion for other Challenges <---------

        -- Code splitting allows you to mark specific code segments as not immediately necessary for loading, signalling your bundler to segregate them into separate `<script>` tags.
        -- Using 'React.lazy' for code splitting enables you toi separate the main section's code from the primary Javascript bundle.
        -- The JavaScript containing React and the code for the entire application, excluding the main section, can now be downloaded independently by the client, without having to wait for the main section's code

        -----------> Solution for other Challenges <---------------

        -- By wrapping the main section within`<Suspense>`, you've indicated to React that it should not prevent the rest of the page from not just streaming but also from hyderating
        -- This feature called selective hydration allows for the hydration of  sections as they become available , before the rest of the HTML and the Javascript code are fully downloaded.
        -- A heavy piece of JS doesn't prevent the rest of the page from becoming interactive

        ------------> Selective Hydration on the Client contd <--------------

        -- Selective Hydration offers a solution to the third issue : the necessity to "hydrate everyting to interact with anything"
        -- React begins hydrating as soon as possible , enabling interactions with elements like the header and side navigation without waiting for the main content to be hydrated
        -- This process is managed automatically by React
        -- In scenarios where multiple components are awaiting hydration, React prioritizes hydration based on the user interactions.

        --------------------> Drawbacks of Suspense SSR <----------------

        -- First, even though Javascript code is streamed to the browser asynchronously, eventually, the entire code for a web page must be downloaded by the user
        -- As applications add more features, the amount of code users need to download also grows. This leads to an important questions:
        
        -- Should users really have to download so much data ?

        -- Second, the current approcach requires that all React components undergo hydration on the client-side, irrespective of their actual need for interactivity.
        -- This process can inefficiebntly spend resources and extend the loading times and time to interactivity for users, as their devices need to process and render components that might not even require client-side interaction.

        -- This leads to another question:
        -- Should all components be hydrated, even those that don't need interactivity ?

        -- Third, in spite of servers superior capacity for handling intensive processing tasks, the bulk of javascript execution still takes place on the user's devices
        -- This can slow down the performance, especially on the devices that are not very powerful

        -- This leads to another important question:
        Should so much of the work be done on the user's device?

        
        --------------------------------> React Server Components (RSC) <----------------------

        -- React Server Components(RSC) represent a new architecutre designed by the  React team
        -- This approach aims to leverage the strengths of both server and client environments, optimizing for efficiency, load times, and interactivity
        -- The architecture introduces a dual-components model
          - Client components
          - Server components
        -- This distinction is not based on the functionality of the components but rather on where they executed and the specific environments they are deisgned to interact with

        ---> Client Components

        -- Client Components are the familiar React components we've been using
        -- They are typically rendered on the client-side(CSR)but, they can also be rendered to HTML on the server (SSR), allowing users to immediatley see the page's HTML, content rather than a blank screen
        -- Components that primarily run on the client but can also be executed once on the server as an optimization strategy
        -- Client Components have access to the client environment, such as the browser, allowing them to use state, effects, and event listeners to handle interactivity and also access browser-exclusive APIs like geolocation or localStorage, allowing you to build UI for specific use cases
        -- Infact, the term "Client Component" doesn't signify anything new; it simply helps diiferentiates these components from the newly introduced Server Components.

        ---> Server Components

        -- Server Components represent a new type of React component specifically designed to operate exclusively on the server.
        -- And unlike client components, their code stays on the server and is never downloaded to the client
        -- This design choice offers multiple benefits to React applications

        ---> Benefits of Server Components

        --- Reduced Bundle Sizes

        -- Server Components do not send code to the client, allowing large dependencies to remain server-side
        -- This benefits users with slower internet connections or less capable devices by eliminating the need toi download, parse and execute JavaScript for these components.
        -- Additionally, it removes the hydration step, speeding up app loading and interaction.

        --- Direct Access to Server-side resources

        -- By having direct access to server-side resources like databases or file systems, Server Components enable data fetching and rendering without needing additional client-side processing
        -- Leveraging the server's computational power and proximity to data sources, they manage compute-intensive rendering tasks and send only interactive pieces of code to the client.

        --- Enhanced Secuirty

        -- Server Components exclusive server-side execution enhances security by keeping senitive data and logic, including tokens and API keys, away from the  client-side.

        --- Improved Data fetching

        -- Server Components enhance data fetching efficiency
        -- Typically, when fetching data no the client-side using useEffect, achild component cannot begin loading its data until the parent component has finished loading its own.
        -- This sequential fetching of data often leads to poor performance.
        -- The main issu is not the round trips themselves, but that these round trips are made from the client to the server
        -- Server Components enables applications to shift these sequential round trips to the server side
        -- By moving this logic to  the server, request latency is reduced, and overall performance is improved, eliminating  client-server "waterfalls"

        -- Caching

        -- Rendering on the server enables caching of th results, which can be resused in subsequent requests and across different users
        -- THis approach can signinificantly improve performance and reduce costs by minimizing the amount of rendering and data fetching required for each request.

        -- Faster Initial Page Load and First Contentful Paint

        -- Sixth, Initial Page load and First Contentful Paint (FCP) are significantly improved with Server Components.
        -- By generating HTML on the server, pages become immediately visible to users without the delay of downloading, parsing and executing Javascript.

        -- Improved SEO

        -- Regarding Search Engine Optimization (SEO), the server-rendered HTML is fully accessible to search engine bots, enhancing the indexability of ypur pages.

        -- Efficient streaming

        -- Server Components allows the rendering process to be divied into manageable chunks, which are then streamed to the client as soon as they are ready.
        -- This approach allows users to start seeing parts of the page earlier, eliminating the need to wait for the entire page to finish renderig on the server

        -- RSC contd

        -- Server Components take charge of data fetching and static rendering , while client Components are tasled with rendering the interactive elements of the application.
        -- The bottom line is that the RSC architecture enables React applications to leverage the best aspects of both server ad client rendering, all while using a single language , a single framework and a cohesive set of APIs.


        ------------------------------> Static Rendering <-----------------------

        -- Static rendering is a strategy where the HTML is generated at build time.
        -- Along with the HTML,the RSC payload is  created for each component, and Javascript chunks are produced for client-side component hydration in the browser.
        -- If you navigate directly to a page route, the corresponding HTML file is served
        -- If you navigate to the route from a different one , the route is created on the client side using the RSC payload and Javascript chunks, without any additional requests to the server
        -- Static rendering is great for performance and use cases include blogs, documention, marketing pages etc.


        -------------------------------> Dynamic Rendering <----------------------------

        -- Dynamic rendering is a server rendering strategy where routes are rendered  for each user at request time.
        -- It is useful when a route has data that is personalized to the user or contains information that can only be known at request time, such as cookies or the URL's search parameters.
        -- News websites, personalized e-commerce pages, and social media feeds are some examples where dynamicn rendering is beneficial.

        ---> How to Dynamically Rendering

        -- During rendering, if a dynamic function is discovered, Next.js will switch to dynamically rendering the whole route.
        -- In Next.js, thses dynamic functions are: Cookies(),headers() and searchParams
        -- Using any of these will opt the whole route into dynammic rendering at request time.


        --------------------------------> Streaming <--------------------------------------

        -- Streaming is a strategy that allows for progressive UI rendering from the server
        -- Work is divided into chunks and streamed to the client as soon as it's ready
        -- This enables users to see arts of the page immediately, before the entire content has finished rendering.
        -- Straming significantly improves both the initial page loading performanceand the rendering of UI elements that tely on slower data fetches, which would otherwise block the rendering of the entire route.
        -- Streaming in integrated into the NExt.js APP router by default.


        ---------------------------------> Server and Client Composition Patterns <-----------------------

        --> Server components
        -- Fetching Data
        -- Directly accessing backend resources
        -- Protecting sensitive information (like access tokens and API keys) on the server.
        -- Keeping large dependencies server-side, which helps in reducing client-side Javascript.

        --> Client Components
        -- Adding interactivity
        -- Handling event listeners (suc as onClick(), onChange(), etc)
        -- Managing state and lifecycle effects (using hooks like useState()), useReducer(), useEffect())
        -- using broser-exclusive APIs
        -- using custom hooks
        -- using React class Components.

        ----------------------------> Server-Only Code <-----------------------------

        -- Certain code is intended to execute only on the server.
        -- You might have modules or functions that use multiple libraries , use environment variable, interact directlu with a database or process confidently information.
        -- Since Javascriopt modules can be shared it's possiboe for code that' meant only for the Server to unitentionally end up in the client
        -- If server-side code gets bundled into the client-side Javascript , it could lead to a bloated bundle size, expose secret keys, database queries and sensitive business logic.
        -- It is crucial to separate server-only code from client-side code to protect the application's security and integrity.
        -- Provide a build-time error if developers accidentally import one of these modules into a client component.
 
 -------------------------------------> Context Providers (Once need to Check while working on it) <-----------------------------------

         -- Context provider are typically rendered near the root of an application to share global application state and logic
         -- For Example, the application themselves\
         -- However, since React context is not supported in Server Components , attemping to create a context at tyhe root of your application will result in an Error
         -- To address this, you can create an render its provider inside a separate Client Component


   --------------------------------------> Client Compoenent Placement <---------------------------

   -- if you have five compoenents

                               one
                        ------   ------
                        |             |
                        |             |
                        two           three
                  -----   ------
                 Four        Five

         -- if component two is client component then four and five also will be client component
         -- In this way if parent is client component then its children will also be client component


         ----------------> Intervleaving Server and Client Components <------------------------
         -- a client componenent can be rendered in side a client component and server component
         -- but a server component can be rendered inside a client component
         -- To render server component in side the client component, server component should be passed as  props in client componenent. 

